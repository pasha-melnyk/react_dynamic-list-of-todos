{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","handleChangeStatus","changeTodoStatus","titleToSearch","todosToShow","randomize","handleChangeTitle","className","htmlFor","type","id","name","placeholder","value","onChange","event","classNames","onClick","map","todo","completed","checked","title","userId","API_URL","CurrentUser","state","user","clearUser","setState","this","loadUser","prevProps","props","a","fetch","then","response","json","changeLoadingStatus","email","phone","React","Component","App","loading","prepareTodos","copiedTodos","filter","toLowerCase","includes","target","todoId","changedTodos","randomizeOrder","sort","Math","random","prevState","preparedTodos","max","ReactDOM","render","document","getElementById"],"mappings":"gYAgBaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,WACAC,EAHuC,EAGvCA,eACAC,EAJuC,EAIvCA,mBACAC,EALuC,EAKvCA,iBACAC,EANuC,EAMvCA,cACAC,EAPuC,EAOvCA,YACAC,EARuC,EAQvCA,UACAC,EATuC,EASvCA,kBATuC,OAWvC,sBAAKC,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,uBAAf,UACE,wBAAOA,UAAU,QAAQC,QAAQ,cAAjC,yBAEE,qBAAKD,UAAU,UAAf,SACE,uBACEE,KAAK,OACLF,UAAU,8BACVG,GAAG,mBACHC,KAAK,gBACLC,YAAY,QACZC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAWT,EAAkBS,WAK7C,qBAAKR,UAAU,SAAf,SACE,yBACEI,KAAK,cACLE,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAWd,EAAmBc,IAH1C,UAKE,wBAAQF,MAAM,GAAd,sBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,4BAGJ,wBACEJ,KAAK,SACLE,KAAK,eACLJ,UAAWS,IACT,SACA,6BACA,YAEFC,QAASZ,EARX,0BAcF,qBAAKE,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGT,EAAMoB,KAAI,SAAAC,GAAI,OACb,qBACEZ,UAAWS,IACT,iBACA,CAAE,6BAA8BG,EAAKC,WACrC,CAAE,0BAA2BD,EAAKC,YAJtC,UASE,wBAAOZ,QAAO,wBAAmBW,EAAKT,IAAtC,UACE,uBACED,KAAK,WACLC,GAAE,wBAAmBS,EAAKT,IAC1BC,KAAK,gBACLU,QAASF,EAAKC,UACdN,SAAU,kBAAMZ,EAAiBiB,EAAKT,OAExC,8BACGS,EAAKG,MACLH,EAAKT,SAIV,wBACEH,UAAWS,IACT,wBACA,SACA,CAAE,kCAAmChB,IAAmBmB,EAAKI,SAE/Dd,KAAK,SACLI,MAAOM,EAAKI,OACZN,QAAS,kBAAMlB,EAAWoB,EAAKI,SARjC,wBAUWJ,EAAKI,YA3BXJ,EAAKT,eC/EhBc,G,MAAU,qCCcT,IAAMC,EAAb,4MACEC,MAAe,CACbC,KAAM,MAFV,EAgBEC,UAAY,WACV,EAAKC,SAAS,CAAEF,KAAM,QAjB1B,uDAKE,WACEG,KAAKC,aANT,gCASE,SAAmBC,GACbF,KAAKG,MAAMjC,iBAAmBgC,EAAUhC,iBAC1C8B,KAAKF,YACLE,KAAKC,cAZX,6DAoBE,4BAAAG,EAAA,sED3BsBX,EC4BOO,KAAKG,MAAMjC,eD3BjCmC,MAAM,GAAD,OAAIX,EAAJ,kBAAqBD,IAC9Ba,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCyB7B,OACQX,EADR,OAGEG,KAAKD,SAAS,CAAEF,SAChBG,KAAKG,MAAMM,sBAJb,iCD3BK,IAAiBhB,IC2BtB,YApBF,0EA2BE,WACE,IAAQI,EAASG,KAAKJ,MAAdC,KACR,EAAuCG,KAAKG,MAApCjC,EAAR,EAAQA,eAAgBD,EAAxB,EAAwBA,WAExB,OACE,qCACE,oBAAIQ,UAAU,qBAAd,SACE,wDAAyBP,OAE1B2B,GACC,sBAAKpB,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCoB,EAAKhB,OACxC,mBAAGJ,UAAU,qBAAb,SAAmCoB,EAAKa,QACxC,mBAAGjC,UAAU,qBAAb,SAAmCoB,EAAKc,QAExC,wBACEhC,KAAK,SACLF,UAAU,4BACVU,QAAS,kBAAMlB,EAAW,IAH5B,6BA1CZ,GAAiC2C,IAAMC,WCGjCC,E,4MACJlB,MAAe,CACb1B,eAAgB,EAChBF,MAAO,GACPwB,MAAO,GACPnB,cAAe,GACfC,YAAa,MACbyC,SAAS,G,EASX9C,WAAa,SAACC,GACZ,EAAK6B,SAAS,CAAE7B,mBACZA,IAAmB,EAAK0B,MAAM1B,gBAAqC,IAAnBA,GAClD,EAAKuC,uB,EAITO,aAAe,WACb,MAII,EAAKpB,MAHP5B,EADF,EACEA,MACAK,EAFF,EAEEA,cACAC,EAHF,EAGEA,YAGE2C,EAAW,YAAOjD,GAQtB,OANIK,IACF4C,EAAcA,EAAYC,QACxB,SAAA7B,GAAI,OAAIA,EAAKG,MAAM2B,cAAcC,SAAS/C,OAItCC,GACN,IAAK,SACH,OAAO2C,EAAYC,QAAO,SAAA7B,GAAI,OAAKA,EAAKC,aAE1C,IAAK,YACH,OAAO2B,EAAYC,QAAO,SAAA7B,GAAI,OAAIA,EAAKC,aAEzC,QACE,OAAO2B,I,EAIb9C,mBAAqB,SAACc,GACpB,IAAQF,EAAUE,EAAMoC,OAAhBtC,MAER,EAAKgB,SAAS,CACZzB,YAAaS,K,EAIjBP,kBAAoB,SAACS,GACnB,IAAQF,EAAUE,EAAMoC,OAAhBtC,MAER,EAAKgB,SAAS,CACZP,MAAOT,EACPV,cAAeU,EAAMoC,iB,EAIzB/C,iBAAmB,SAACkD,GAClB,IAEMC,EAFY,EAAK3B,MAAf5B,MAEmBoB,KAAI,SAAAC,GAC7B,OAAIA,EAAKT,KAAO0C,EACP,2BACFjC,GADL,IAEEC,WAAYD,EAAKC,YAIdD,KAGT,EAAKU,SAAS,CACZ/B,MAAOuD,K,EAIXC,eAAiB,WACf,IAAQxD,EAAU,EAAK4B,MAAf5B,MACFiD,EAAW,YAAOjD,GAExBiD,EAAYQ,MAAK,kBAAMC,KAAKC,SAAW,MAEvC,EAAK5B,SAAS,CACZ/B,MAAOiD,K,EAIXR,oBAAsB,WACpB,EAAKV,UAAS,SAAC6B,GAAD,MAAgB,CAAEb,SAAUa,EAAUb,a,8FAxFtD,4BAAAX,EAAA,sEFxBOC,MAAM,GAAD,OAAIX,EAAJ,WACTY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UEuB7B,OACQxC,EADR,OAGEgC,KAAKD,SAAS,CAAE/B,MAAM,YAAKA,KAH7B,gD,0EA2FA,WACE,MAKIgC,KAAKJ,MAJP1B,EADF,EACEA,eACAsB,EAFF,EAEEA,MACAlB,EAHF,EAGEA,YACAyC,EAJF,EAIEA,QAEIc,EAAgB7B,KAAKgB,eAE3B,OACE,sBAAKvC,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACET,MAAO6D,EACP5D,WAAY+B,KAAK/B,WACjBC,eAAgBA,EAChBC,mBAAoB6B,KAAK7B,mBACzBK,kBAAmBwB,KAAKxB,kBACxBH,cAAemB,EACflB,YAAaA,EACbC,UAAWyB,KAAKwB,eAChBpD,iBAAkB4B,KAAK5B,qBAI3B,qBAAKK,UAAU,eAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,0BACEA,UAAWS,IACT,WACA,WACA,UACA,CAAE,wBAAyB6B,IAE7Be,IAAI,MAPN,iBAWC5D,EACC,cAAC,EAAD,CACEA,eAAgBA,EAChBD,WAAY+B,KAAK/B,WACjBwC,oBAAqBT,KAAKS,sBAE1B,+B,GAjJEG,IAAMC,WAyJTC,ICvKfiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c5e70baf.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (selectedUserId: number) => void;\n  selectedUserId: number;\n  handleChangeStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  changeTodoStatus: (todoId: number) => void;\n  titleToSearch: string;\n  todosToShow: string;\n  randomize: () => void;\n  handleChangeTitle: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n  handleChangeStatus,\n  changeTodoStatus,\n  titleToSearch,\n  todosToShow,\n  randomize,\n  handleChangeTitle,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__search-bar\">\n      <label className=\"label\" htmlFor=\"title-input\">\n        Search todo:\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            className=\"input TodoList__title-input\"\n            id=\"title-search-bar\"\n            name=\"titleToSearch\"\n            placeholder=\"Title\"\n            value={titleToSearch}\n            onChange={(event) => handleChangeTitle(event)}\n          />\n        </div>\n      </label>\n\n      <div className=\"select\">\n        <select\n          name=\"todosToShow\"\n          value={todosToShow}\n          onChange={(event) => handleChangeStatus(event)}\n        >\n          <option value=\"\">Show all</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </div>\n      <button\n        type=\"button\"\n        name=\"isRandomized\"\n        className={classNames(\n          'button',\n          'TodoList__randomize-button',\n          'is-light',\n        )}\n        onClick={randomize}\n      >\n        Randomize\n      </button>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed },\n            )}\n            key={todo.id}\n          >\n\n            <label htmlFor={`todo-checkbox-${todo.id}`}>\n              <input\n                type=\"checkbox\"\n                id={`todo-checkbox-${todo.id}`}\n                name=\"todo-checkbox\"\n                checked={todo.completed}\n                onChange={() => changeTodoStatus(todo.id)}\n              />\n              <p>\n                {todo.title}\n                {todo.id}\n              </p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                'button',\n                { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n              )}\n              type=\"button\"\n              value={todo.userId}\n              onClick={() => selectUser(todo.userId)}\n            >\n              {`User#${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const API_URL = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number;\n  selectUser: (selectedUserId: number) => void;\n  changeLoadingStatus: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUserId !== prevProps.selectedUserId) {\n      this.clearUser();\n      this.loadUser();\n    }\n  }\n\n  clearUser = () => {\n    this.setState({ user: null });\n  };\n\n  async loadUser() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n    this.props.changeLoadingStatus();\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectedUserId, selectUser } = this.props;\n\n    return (\n      <>\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${selectedUserId}`}</span>\n        </h2>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button CurrentUser__clear\"\n              onClick={() => selectUser(0)}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport classNames from 'classnames';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  title: string;\n  todosToShow: string;\n  loading: boolean;\n  titleToSearch: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    title: '',\n    titleToSearch: '',\n    todosToShow: 'all',\n    loading: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos: [...todos] });\n  }\n\n  selectUser = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n    if (selectedUserId !== this.state.selectedUserId && selectedUserId !== 0) {\n      this.changeLoadingStatus();\n    }\n  };\n\n  prepareTodos = () => {\n    const {\n      todos,\n      titleToSearch,\n      todosToShow,\n    } = this.state;\n\n    let copiedTodos = [...todos];\n\n    if (titleToSearch) {\n      copiedTodos = copiedTodos.filter(\n        todo => todo.title.toLowerCase().includes(titleToSearch),\n      );\n    }\n\n    switch (todosToShow) {\n      case 'active':\n        return copiedTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return copiedTodos.filter(todo => todo.completed);\n\n      default:\n        return copiedTodos;\n    }\n  };\n\n  handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      todosToShow: value,\n    });\n  };\n\n  handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n      titleToSearch: value.toLowerCase(),\n    });\n  };\n\n  changeTodoStatus = (todoId: number) => {\n    const { todos } = this.state;\n\n    const changedTodos = todos.map(todo => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    this.setState({\n      todos: changedTodos,\n    });\n  };\n\n  randomizeOrder = () => {\n    const { todos } = this.state;\n    const copiedTodos = [...todos];\n\n    copiedTodos.sort(() => Math.random() - 0.5);\n\n    this.setState({\n      todos: copiedTodos,\n    });\n  };\n\n  changeLoadingStatus = () => {\n    this.setState((prevState) => ({ loading: !prevState.loading }));\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      title,\n      todosToShow,\n      loading,\n    } = this.state;\n    const preparedTodos = this.prepareTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            handleChangeStatus={this.handleChangeStatus}\n            handleChangeTitle={this.handleChangeTitle}\n            titleToSearch={title}\n            todosToShow={todosToShow}\n            randomize={this.randomizeOrder}\n            changeTodoStatus={this.changeTodoStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            <progress\n              className={classNames(\n                'progress',\n                'is-small',\n                'is-link',\n                { 'App__content--hidden': !loading },\n              )}\n              max=\"100\"\n            >\n              10%\n            </progress>\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n                changeLoadingStatus={this.changeLoadingStatus}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}